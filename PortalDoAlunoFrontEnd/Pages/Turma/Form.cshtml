@page "{id?}"
@model PortalDoAlunoFrontend.Pages.Turma.FormModel
@using PortalDoAluno.Domain.Extensions

@{
    ViewData["Title"] = Model.Turma.Id == null ? "Criar Turma" : "Editar Turma";
}

<h2 class="mb-4 text-center text-primary">@ViewData["Title"]</h2>

<div class="container d-flex justify-content-center">
    <form method="post" asp-page-handler="Submit" class="w-50 p-4 rounded shadow-sm" style="background-color: #f9f9f9;">
        <input type="hidden" asp-for="Turma.Id" />
        
        <div class="form-group">
            <label class="font-weight-bold">Curso:</label>
            <select asp-for="Turma.CursoId" class="form-control form-control-sm rounded">
                @foreach (var curso in Enum.GetValues(typeof(PortalDoAluno.Domain.Entities.Curso)).Cast<PortalDoAluno.Domain.Entities.Curso>())
                {
                    @if (Model.Turma.CursoId == Convert.ToInt32(curso))
                    {
                        <option value="@Convert.ToInt32(curso)" selected>@curso.GetDescription()</option>
                    }
                    else
                    {
                        <option value="@Convert.ToInt32(curso)">@curso.GetDescription()</option>
                    }
                }
            </select>
            <span asp-validation-for="Turma.CursoId" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Turma:</label>
            <input asp-for="Turma.Nome" class="form-control"  maxlength="45" />
            <span asp-validation-for="Turma.Nome" class="text-danger"></span> 
        </div>

        <div class="form-group">
            <label class="font-weight-bold">Ano:</label>
            <input asp-for="Turma.Ano" type="number" class="form-control form-control-sm rounded" min="1900" max="2100" step="1" />
            <span asp-validation-for="Turma.Ano" class="text-danger"></span>
        </div>

        <div id="errorContainer" class="alert alert-danger" style="display:none;"></div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary btn-sm px-4">@ViewData["Title"]</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        const form = document.querySelector("form");
        const submitButton = form.querySelector("button[type='submit']");
        const nomeInput = document.querySelector('input[name="Turma.Nome"]');
        const anoInput = document.querySelector('input[name="Turma.Ano"]');

        function validateForm() {
            let isValid = true;

            document.querySelectorAll('.text-danger').forEach(el => el.textContent = '');
            document.getElementById('errorContainer').style.display = 'none';        
                       
            submitButton.disabled = !isValid;
        }

        nomeInput.addEventListener('input', validateForm);
        anoInput.addEventListener('input', validateForm);

        form.addEventListener("submit", async function (event) {
            event.preventDefault();

            validateForm();

            if (submitButton.disabled) return;

            const id = document.querySelector('input[name="Turma.Id"]')?.value || null;
            const cursoId = parseInt(document.querySelector('select[name="Turma.CursoId"]').value, 10);

            const url = id ? `https://localhost:7166/api/turma/${id}` : 'https://localhost:7166/api/turma';
            const method = id ? 'PUT' : 'POST';

            const formData = {
                Id: id,
                Nome: nomeInput.value,
                Ano: anoInput.value,
                CursoId: cursoId
            };

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    window.location.href = '/Turma/Index';
                } else {
                    const errorData = await response.json();
                    if (response.status === 409 && errorData.message) {
                        document.getElementById('errorContainer').textContent = errorData.message; 
                        document.getElementById('errorContainer').style.display = 'block'; 
                    } else {
                        document.getElementById('errorContainer').textContent = "Erro ao salvar a turma."; 
                        document.getElementById('errorContainer').style.display = 'block'; 
                    }
                }
            }
        });
    </script>
}


